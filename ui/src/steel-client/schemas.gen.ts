// This file is auto-generated by @hey-api/openapi-ts

export const ScrapeRequestSchema = {
  title: "ScrapeRequest",
  type: "object",
  properties: {
    url: {
      type: "string",
    },
    format: {
      type: "array",
      items: {
        type: "string",
        enum: ["html", "readability", "cleaned_html", "markdown"],
      },
    },
    screenshot: {
      type: "boolean",
    },
    pdf: {
      type: "boolean",
    },
    proxyUrl: {
      type: "string",
    },
    delay: {
      type: "number",
    },
    logUrl: {
      type: "string",
    },
  },
  required: ["url"],
  additionalProperties: false,
} as const;

export const ScrapeResponseSchema = {
  title: "ScrapeResponse",
  type: "object",
  properties: {
    content: {
      type: "object",
      additionalProperties: {},
    },
    metadata: {
      type: "object",
      properties: {
        title: {
          type: "string",
        },
        ogImage: {
          type: "string",
        },
        ogTitle: {
          type: "string",
        },
        urlSource: {
          type: "string",
        },
        description: {
          type: "string",
        },
        ogDescription: {
          type: "string",
        },
        statusCode: {
          type: "integer",
        },
        language: {
          type: "string",
        },
        timestamp: {
          type: "string",
          format: "date-time",
        },
        published_timestamp: {
          type: "string",
          format: "date-time",
        },
      },
      required: ["statusCode"],
      additionalProperties: false,
    },
    links: {
      type: "array",
      items: {
        type: "object",
        properties: {
          url: {
            type: "string",
          },
          text: {
            type: "string",
          },
        },
        required: ["url", "text"],
        additionalProperties: false,
      },
    },
    screenshot: {
      type: "string",
    },
    pdf: {
      type: "string",
    },
  },
  required: ["content", "metadata", "links"],
  additionalProperties: false,
} as const;

export const ScreenshotRequestSchema = {
  title: "ScreenshotRequest",
  type: "object",
  properties: {
    url: {
      type: "string",
    },
    proxyUrl: {
      type: "string",
    },
    delay: {
      type: "number",
    },
    fullPage: {
      type: "boolean",
    },
    logUrl: {
      type: "string",
    },
  },
  required: ["url"],
  additionalProperties: false,
} as const;

export const ScreenshotResponseSchema = {
  title: "ScreenshotResponse",
} as const;

export const PDFRequestSchema = {
  title: "PDFRequest",
  type: "object",
  properties: {
    url: {
      type: "string",
    },
    proxyUrl: {
      type: "string",
    },
    delay: {
      type: "number",
    },
    logUrl: {
      type: "string",
    },
  },
  required: ["url"],
  additionalProperties: false,
} as const;

export const PDFResponseSchema = {
  title: "PDFResponse",
} as const;

export const CreateSessionSchema = {
  title: "CreateSession",
  type: "object",
  properties: {
    sessionId: {
      type: "string",
      format: "uuid",
      description: "Unique identifier for the session",
    },
    proxyUrl: {
      type: "string",
      description: "Proxy URL to use for the session",
    },
    userAgent: {
      type: "string",
      description: "User agent string to use for the session",
    },
    sessionContext: {
      type: "object",
      additionalProperties: {},
      description: "Session context to use for the session",
    },
    isSelenium: {
      type: "boolean",
      description: "Indicates if Selenium is used in the session",
    },
    logSinkUrl: {
      type: "string",
      description: "Log sink URL to use for the session",
    },
    extensions: {
      type: "array",
      items: {
        type: "string",
      },
      description: "Extensions to use for the session",
    },
    timezone: {
      type: "string",
      description: "Timezone to use for the session",
    },
    dimensions: {
      type: "object",
      properties: {
        width: {
          type: "number",
        },
        height: {
          type: "number",
        },
      },
      required: ["width", "height"],
      additionalProperties: false,
      description: "Dimensions to use for the session",
    },
  },
  required: ["sessionId"],
  additionalProperties: false,
} as const;

export const SessionDetailsSchema = {
  title: "SessionDetails",
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
      description: "Unique identifier for the session",
    },
    createdAt: {
      type: "string",
      format: "date-time",
      description: "Timestamp when the session started",
    },
    status: {
      type: "string",
      enum: ["live", "released", "failed"],
      description: "Status of the session",
    },
    duration: {
      type: "integer",
      description: "Duration of the session in milliseconds",
    },
    eventCount: {
      type: "integer",
      description: "Number of events processed in the session",
    },
    timeout: {
      type: "integer",
      description: "Session timeout duration in milliseconds",
    },
    creditsUsed: {
      type: "integer",
      description: "Amount of credits consumed by the session",
    },
    websocketUrl: {
      type: "string",
      description: "URL for the session's WebSocket connection",
    },
    debugUrl: {
      type: "string",
      description: "URL for debugging the session",
    },
    sessionViewerUrl: {
      type: "string",
      description: "URL to view session details",
    },
    userAgent: {
      type: "string",
      description: "User agent string used in the session",
    },
    proxy: {
      type: "string",
      description: "Proxy server used for the session",
    },
    solveCaptcha: {
      type: "boolean",
      description: "Indicates if captcha solving is enabled",
    },
    isSelenium: {
      type: "boolean",
      description: "Indicates if Selenium is used in the session",
    },
  },
  required: [
    "id",
    "createdAt",
    "status",
    "duration",
    "eventCount",
    "timeout",
    "creditsUsed",
    "websocketUrl",
    "debugUrl",
    "sessionViewerUrl",
  ],
  additionalProperties: false,
} as const;

export const LaunchRequestSchema = {
  title: "LaunchRequest",
  type: "object",
  properties: {
    options: {
      type: "object",
      properties: {
        args: {
          type: "array",
          items: {
            type: "string",
          },
        },
        chromiumSandbox: {
          type: "boolean",
        },
        devtools: {
          type: "boolean",
        },
        downloadsPath: {
          type: "string",
        },
        headless: {
          type: "boolean",
        },
        ignoreDefaultArgs: {
          anyOf: [
            {
              type: "boolean",
            },
            {
              type: "array",
              items: {
                type: "string",
              },
            },
          ],
        },
        proxyUrl: {
          type: "string",
        },
        timeout: {
          type: "number",
        },
        tracesDir: {
          type: "string",
        },
      },
      additionalProperties: false,
    },
    req: {},
    stealth: {
      type: "boolean",
    },
    cookies: {
      type: "array",
    },
    userAgent: {
      type: "string",
    },
    extensions: {
      type: "array",
      items: {
        type: "string",
      },
    },
    logSinkUrl: {
      type: "string",
    },
    customHeaders: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
    timezone: {
      type: "string",
    },
    dimensions: {
      type: "object",
      properties: {
        width: {
          type: "number",
        },
        height: {
          type: "number",
        },
      },
      required: ["width", "height"],
      additionalProperties: false,
      nullable: true,
    },
  },
  required: ["options"],
  additionalProperties: false,
} as const;

export const LaunchResponseSchema = {
  title: "LaunchResponse",
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
  },
  required: ["success"],
  additionalProperties: false,
} as const;
